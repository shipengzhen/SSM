<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "
    default-autowire="default"
    >
    
    <!-- 配置DataSource -->
    <!-- 1 -->
    <!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost/myschool?useUnicode=true&amp;characterEncoding=utf-8" />
        <property name="username" value="spz" />
        <property name="password" value="shipengzhen1997" />
    </bean> -->
    <!--2通过database.properties文件配置-->
    <!-- 引入properties文件 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location">
            <value>classpath:database.properties</value>
        </property>
    </bean>
   <!--  <context:property-placeholder location="classpath:database.properties"/> -->
    <!--bean的作用域通过scope属性来设置
    		singleton:默认值(效率高，线程不安全)
    		prototype:(效率低，线程安全)
    	web环境下的作用域:requst,session,global session
      -->
     <!--Spring的自动装配通过autowire(局部),default-autowire(全局)属性设置 
     		no:不使用自动装配
     		byType:根据属性类型自动配装
     		byName:根据属性名自动配装
     		constructor:与byType的方式类似，不同之处在于它应用与构造器参数
     -->
    <bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource" scope="singleton" autowire="default">
        <property name="driverClassName" value="${driver}" />
        <property name="url" value="${url}" />
        <property name="username" value="${user}" />
        <property name="password" value="${password}" />
    </bean>
   <!-- 3.通过JNDI配置DataSource(tomcat中的context.xml文件) -->
    <!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        通过jndiName指定引用的JNDI数据源名称
        <property name="jndiName">
            <value>java:comp/env/jdbc/myschool?useUnicode=true&amp;characterEncoding=utf-8</value>
        </property>
    </bean> -->
    
    <!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 引用数据源组件 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 引用MyBatis配置文件中的配置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 配置SQL映射文件信息 -->
        <property name="mapperLocations">
            <list>
                <value>classpath:com/bdqn/ms/dao/**/*.xml</value>
            </list>
        </property>
    </bean>
   
    <!-- 方法一(给SqlSessionTemplate对象赋值)-->
    <!-- 配置SqlSessionTemplate -->
    <!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean> -->
    <!-- 配置DAO -->
    <!-- <bean id="GradeDaoImpl" class="com.bdqn.ms.dao.impl.GradeDaoImpl">
        <property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
    </bean> -->
   <!--  配置Service -->
   <!--  <bean id="GradeServiceImpl" class="com.bdqn.ms.service.impl.GradeServiceImpl">
        <property name="gradeDao" ref="GradeDaoImpl" />
    </bean> -->
    
    <!-- 方法二(继承SqlSessionDaoSupport) -->
    <!--  配置DAO -->
   <!--  <bean id="StudentDaoImpl" class="com.bdqn.ms.dao.impl.StudentDaoImpl">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean> -->
   <!--  配置Service -->
    <!-- <bean id="StudentServiceImpl" class="com.bdqn.ms.service.impl.StudentServiceImpl">
        <property name="studentDao" ref="StudentDaoImpl" />
    </bean> -->
    
    <!-- 方法三(使用MapperFactoryBean注入映射器,可以省略dao层实现类) -->
   <!--  配置DAO -->
    <!-- <bean id="ResultDaoImpl" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.bdqn.ms.dao.IResultDao" />
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean> -->
    
    <!-- 方法四(使用MapperScannerConfigurer注入映射器,可以省略dao层实现类) -->
    <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.bdqn.ms.dao" />
    </bean> -->
   <!--  配置Service -->
    <!-- <bean id="ResultServiceImpl" class="com.bdqn.ms.service.impl.ResultServiceImpl">
        <property name="resultDao" ref="ResultDaoImpl" />
    </bean> -->
    <!--使用注解配置Service  -->
    <!-- 扫描包中注解标注的类 -->
   <!--  <context:component-scan base-package="com.bdqn.ms.service" /> -->
	
	<!-- 定义事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    
	<!-- 事务处理 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
        	<!--<tx:method/>标签中:
        		name:是必须的，用于指定匹配方法。需要对方法名进行约定，可以使用通配符(*)
        		propagation:
        			PEQUIRED:默认值，表示如果存在一个事务，则支持当前事务，如果没有事务，则开启新事务
        			REQUIRES_NEW:总是开启新事务,如果一个事务已经存在，则将这个存在的事务挂起，开启新事务执行该方法
        			MANDATORY:如果存在事务，则支持当前事务，如果当前没有一个活动的事务，则抛出异常
        			NESTED:如果当前存在一个活动的事务，则创建一个事务作为当前事务的嵌套事务运行，如果没有当前事务，取默认值
        			SUPPORTS:如果存在一个事务，则支持当前事务，如果当前没有事务，则按非事务方式执行
        			NOT_SUPPORTS:总是以非事务方式执行，如果一个事务已经存在，则将这个存在的事务挂起，然后执行该方法
        			NEVER:总是以非事务方式执行。如果当前存在一个活动的事务，则抛出异常
        		isolation:事务隔离等级
        			DEFAULT:默认值，表示使用数据库默认的事务隔离级别
        			READ_UNCOMMITTED:未提交读
        			READ_COMMITTED:提交读
        			REPEATABLE_READ:可重复读
        			SERLALIZABLE:串行读
        		timeout:事务超过时间。允许事务运行的最长时间，以秒为单位，超过给定的时间自动回滚，默认值-1，表示永不超时
        		read-only:事务是否为只读，默认值为false
        		rollback-for:设定能够触发回滚的异常类型，默认只在抛出Runtime Exception时才标识事务回滚。
        				可以通过全限定类名自行指定需要回滚事务异常，多个类名用英文逗号隔开。
        		no-rollback-for:设定不触发回滚的异常类型。默认checked Exception不会触发事务回滚。
        				可以通过全限定类名自行指定需要回滚事务异常，多个类名用英文逗号隔开。	
        	-->
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
	<!-- 定义切面 -->
    <aop:config>
        <aop:pointcut id="serviceMethod" expression="execution(* com..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
    </aop:config>
    
    <!--使用注解实现声明式事务处理 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!--@Transactional(propagation=Propagation.REQUIRED,rollbackFor=Throwable.class)-->
	<!--使用注解配置切面  -->
    <!-- 扫描包中注解标注的类 -->
	<context:component-scan base-package="com.bdqn.ms.dao,com.bdqn.ms.service" />
	<bean class="com.bdqn.ms.aop.SpringLogger"></bean>
	<aop:aspectj-autoproxy />
</beans>